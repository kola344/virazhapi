from virazh_bot import keygen, temp
import db
import config
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, KeyboardButton, InlineKeyboardButton
import os
from integration import proxy_api
from virazh_bot.ads import keyboards
from virazh_bot.bot_logging import log_message
from virazh_bot.ads.models import AdsSettings

replic_403 = "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ"
replic_menu = "–†–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
replic_gpt_edit_item = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'
replic_gpt_edit_prompt = '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç'
replic_gpt_edit_image = '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
replic_gpt_generation = '‚ú®–ì–µ–Ω–µ—Ä–∏—Ä—É—é...'
replic_gpt_publicating = 'üïô –ü—É–±–ª–∏–∫—É—é...'
replic_vk_no_available = '‚ö†Ô∏è –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'

async def replic_gpt_menu():
    balance = await proxy_api.get_balance()
    text = f"‚ú® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∫–ª–∞–º—ã ChatGPT\n"
    if balance >= 20:
        text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±."
        return text, keyboards.gpt_menu_success
    else:
        text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n–í–Ω–∏–º–∞–Ω–∏–µ! –° –±–∞–ª–∞–Ω—Å–æ–º –º–µ–Ω–µ–µ 20 —Ä—É–±. –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n–ü—Ä–æ–±–ª–µ–º–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç, —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ—à–∞–µ—Ç –≤–æ–ø—Ä–æ—Å"
        await log_message("–ë–∞–ª–∞–Ω—Å ProxyAPI –º–µ–Ω–µ–µ 20 —Ä—É–±, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
        return text, keyboards.gpt_menu_fail

async def replic_creator_gpt(ad: AdsSettings):
    text = f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n–†–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã–π —Ç–æ–≤–∞—Ä: {ad.item}\n–ü—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT: {ad.prompt}'
    statuses = ["üî¥", "üü¢"]
    btn_back = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="ads.set.chatgpt")
    btn_generate = InlineKeyboardButton(text="‚ú®–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="ads.gpt.generate")
    btn_date = InlineKeyboardButton(text=f"{statuses[ad.selected['date']]} {ad.date}", callback_data="ads.select.date")
    btn_day_week = InlineKeyboardButton(text=f"{statuses[ad.selected['day_week']]} {ad.day_week}", callback_data="ads.select.day_week")
    btn_season = InlineKeyboardButton(text=f"{statuses[ad.selected['season']]} {ad.season}", callback_data="ads.select.season")
    btn_weather = InlineKeyboardButton(text=f"{statuses[ad.selected['weather']]} {ad.weather}", callback_data="ads.select.weather")
    btn_gift = InlineKeyboardButton(text=f"{statuses[ad.selected['gift']]} {ad.gift}", callback_data="ads.select.gift")
    btn_item = InlineKeyboardButton(text='üçú –¢–æ–≤–∞—Ä', callback_data="ads.select.item")
    btn_prompt = InlineKeyboardButton(text='‚úèÔ∏è –ü—Ä–æ–º–ø—Ç', callback_data="ads.select.prompt")
    btn_image = InlineKeyboardButton(text='üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', callback_data="ads.select.image")
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [btn_date],
        [btn_day_week],
        [btn_season],
        [btn_weather],
        [btn_gift],
        [btn_item],
        [btn_prompt],
        [btn_image],
        [btn_generate],
        [btn_back]
    ])
    return text, markup

async def replic_gpt_published(url):
    text = '‚úîÔ∏è –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'
    markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', url=url)]])
    return text, markup
